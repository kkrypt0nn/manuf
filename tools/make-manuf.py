import csv
import html

import requests

file_header = """# This file was generated by running ./tools/make-manuf.py for the Manuf Project
# 
# The data below has been assembled from the following sources:
#
# The IEEE public OUI listings available from:
# <http://standards-oui.ieee.org/oui/oui.csv>
# <http://standards-oui.ieee.org/cid/cid.csv>
# <http://standards-oui.ieee.org/iab/iab.csv>
# <http://standards-oui.ieee.org/oui28/mam.csv>
# <http://standards-oui.ieee.org/oui36/oui36.csv>
#
# You can get the latest version of this file from
# https://github.com/kkrypt0nn/manuf/blob/main/manuf.txt

"""

urls = [
    "http://standards-oui.ieee.org/oui/oui.csv",
    "http://standards-oui.ieee.org/cid/cid.csv",
    "http://standards-oui.ieee.org/iab/iab.csv",
    "http://standards-oui.ieee.org/oui28/mam.csv",
    "http://standards-oui.ieee.org/oui36/oui36.csv",
]


def get_csv(url: str) -> str:
    response = requests.get(
        url=url,
        headers={"User-Agent": "Manuf Project (https://github.com/kkrypt0nn/manuf)"},
    )
    return response.text


def assignment_to_prefix(assignment: str) -> str:
    suffix = ""
    match len(assignment):
        case 7:
            suffix = "0:00:00/28"
        case 9:
            suffix = "0:00/36"
    return (
        ":".join(assignment[i : i + 2] for i in range(0, len(assignment), 2)) + suffix
    )


def format_manufacturer(organization_name: str) -> str:
    manufacturer = organization_name.strip()  # Strip unnecessary whitespaces
    manufacturer = html.unescape(
        manufacturer
    )  # Unescape some HTML that is in some organization names
    if manufacturer.upper() == manufacturer:
        manufacturer = manufacturer.title()  # Let's not scream the organization names
    return manufacturer


def main() -> None:
    content = {}
    for url in urls:
        csv_content = get_csv(url)
        reader = csv.reader(csv_content.splitlines())
        header = next(reader)  # We ignore the title row
        if len(header) != 4:
            raise ValueError(f"Unexpected CSV header format in {url}: {header}")

        for row_num, row in enumerate(reader, start=2):
            if len(row) != 4:
                raise ValueError(
                    f"Unexpected row format in {url} at line {row_num}: {row}"
                )

            assignment = row[1].upper().strip()
            if not assignment.isalnum() or len(assignment) not in (6, 7, 9):
                raise ValueError(
                    f"Invalid assignment format in {url} at line {row_num}: {assignment}"
                )
            # Row format: Registry,Assignment,Organization Name,Organization Address
            # We only need the Assignment && Organization Name
            try:
                prefix = assignment_to_prefix(assignment)
                manufacturer = format_manufacturer(row[2])
                content[prefix] = manufacturer
            except Exception as e:
                raise RuntimeError(
                    f"Failed to process row in {url} at line {row_num}: {e}"
                )

    keys = list(content.keys())
    keys.sort()
    sorted_content = {i: content[i] for i in keys}
    with open("manuf.txt", "w+", encoding="utf-8") as manuf_file:
        manuf_file.write(file_header)
        for k, v in sorted_content.items():
            separator = "\t" * 2
            if "/" in k:
                separator = "\t"
            manuf_file.write(f"{k}{separator}{v}\n")


if __name__ == "__main__":
    main()
